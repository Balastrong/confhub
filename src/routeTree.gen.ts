/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as MyEventsRouteImport } from './routes/my-events'
import { Route as CalendarRouteImport } from './routes/calendar'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CommunitiesIndexRouteImport } from './routes/communities/index'
import { Route as EventsSubmitRouteImport } from './routes/events/submit'
import { Route as EventsEventSlugRouteImport } from './routes/events/$eventSlug'
import { Route as CommunitiesCreateRouteImport } from './routes/communities/create'
import { Route as CommunitiesCommunitySlugRouteImport } from './routes/communities/$communitySlug'
import { Route as EventsProSubmitRouteImport } from './routes/events/pro.submit'
import { Route as EventsProEventIdRouteImport } from './routes/events/pro.$eventId'
import { ServerRoute as ApiMcpServerRouteImport } from './routes/api/mcp'
import { ServerRoute as DotwellKnownOpenidConfigurationServerRouteImport } from './routes/[.]well-known/openid-configuration'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth.$'

const rootServerRouteImport = createServerRootRoute()

const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const MyEventsRoute = MyEventsRouteImport.update({
  id: '/my-events',
  path: '/my-events',
  getParentRoute: () => rootRouteImport,
} as any)
const CalendarRoute = CalendarRouteImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunitiesIndexRoute = CommunitiesIndexRouteImport.update({
  id: '/communities/',
  path: '/communities/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsSubmitRoute = EventsSubmitRouteImport.update({
  id: '/events/submit',
  path: '/events/submit',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsEventSlugRoute = EventsEventSlugRouteImport.update({
  id: '/events/$eventSlug',
  path: '/events/$eventSlug',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunitiesCreateRoute = CommunitiesCreateRouteImport.update({
  id: '/communities/create',
  path: '/communities/create',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunitiesCommunitySlugRoute =
  CommunitiesCommunitySlugRouteImport.update({
    id: '/communities/$communitySlug',
    path: '/communities/$communitySlug',
    getParentRoute: () => rootRouteImport,
  } as any)
const EventsProSubmitRoute = EventsProSubmitRouteImport.update({
  id: '/events/pro/submit',
  path: '/events/pro/submit',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsProEventIdRoute = EventsProEventIdRouteImport.update({
  id: '/events/pro/$eventId',
  path: '/events/pro/$eventId',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiMcpServerRoute = ApiMcpServerRouteImport.update({
  id: '/api/mcp',
  path: '/api/mcp',
  getParentRoute: () => rootServerRouteImport,
} as any)
const DotwellKnownOpenidConfigurationServerRoute =
  DotwellKnownOpenidConfigurationServerRouteImport.update({
    id: '/.well-known/openid-configuration',
    path: '/.well-known/openid-configuration',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/my-events': typeof MyEventsRoute
  '/profile': typeof ProfileRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/communities/$communitySlug': typeof CommunitiesCommunitySlugRoute
  '/communities/create': typeof CommunitiesCreateRoute
  '/events/$eventSlug': typeof EventsEventSlugRoute
  '/events/submit': typeof EventsSubmitRoute
  '/communities': typeof CommunitiesIndexRoute
  '/events/pro/$eventId': typeof EventsProEventIdRoute
  '/events/pro/submit': typeof EventsProSubmitRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/my-events': typeof MyEventsRoute
  '/profile': typeof ProfileRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/communities/$communitySlug': typeof CommunitiesCommunitySlugRoute
  '/communities/create': typeof CommunitiesCreateRoute
  '/events/$eventSlug': typeof EventsEventSlugRoute
  '/events/submit': typeof EventsSubmitRoute
  '/communities': typeof CommunitiesIndexRoute
  '/events/pro/$eventId': typeof EventsProEventIdRoute
  '/events/pro/submit': typeof EventsProSubmitRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/my-events': typeof MyEventsRoute
  '/profile': typeof ProfileRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/communities/$communitySlug': typeof CommunitiesCommunitySlugRoute
  '/communities/create': typeof CommunitiesCreateRoute
  '/events/$eventSlug': typeof EventsEventSlugRoute
  '/events/submit': typeof EventsSubmitRoute
  '/communities/': typeof CommunitiesIndexRoute
  '/events/pro/$eventId': typeof EventsProEventIdRoute
  '/events/pro/submit': typeof EventsProSubmitRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/calendar'
    | '/my-events'
    | '/profile'
    | '/sign-in'
    | '/sign-up'
    | '/communities/$communitySlug'
    | '/communities/create'
    | '/events/$eventSlug'
    | '/events/submit'
    | '/communities'
    | '/events/pro/$eventId'
    | '/events/pro/submit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/calendar'
    | '/my-events'
    | '/profile'
    | '/sign-in'
    | '/sign-up'
    | '/communities/$communitySlug'
    | '/communities/create'
    | '/events/$eventSlug'
    | '/events/submit'
    | '/communities'
    | '/events/pro/$eventId'
    | '/events/pro/submit'
  id:
    | '__root__'
    | '/'
    | '/calendar'
    | '/my-events'
    | '/profile'
    | '/sign-in'
    | '/sign-up'
    | '/communities/$communitySlug'
    | '/communities/create'
    | '/events/$eventSlug'
    | '/events/submit'
    | '/communities/'
    | '/events/pro/$eventId'
    | '/events/pro/submit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CalendarRoute: typeof CalendarRoute
  MyEventsRoute: typeof MyEventsRoute
  ProfileRoute: typeof ProfileRoute
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
  CommunitiesCommunitySlugRoute: typeof CommunitiesCommunitySlugRoute
  CommunitiesCreateRoute: typeof CommunitiesCreateRoute
  EventsEventSlugRoute: typeof EventsEventSlugRoute
  EventsSubmitRoute: typeof EventsSubmitRoute
  CommunitiesIndexRoute: typeof CommunitiesIndexRoute
  EventsProEventIdRoute: typeof EventsProEventIdRoute
  EventsProSubmitRoute: typeof EventsProSubmitRoute
}
export interface FileServerRoutesByFullPath {
  '/.well-known/openid-configuration': typeof DotwellKnownOpenidConfigurationServerRoute
  '/api/mcp': typeof ApiMcpServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/.well-known/openid-configuration': typeof DotwellKnownOpenidConfigurationServerRoute
  '/api/mcp': typeof ApiMcpServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/.well-known/openid-configuration': typeof DotwellKnownOpenidConfigurationServerRoute
  '/api/mcp': typeof ApiMcpServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/.well-known/openid-configuration' | '/api/mcp' | '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/.well-known/openid-configuration' | '/api/mcp' | '/api/auth/$'
  id:
    | '__root__'
    | '/.well-known/openid-configuration'
    | '/api/mcp'
    | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  DotwellKnownOpenidConfigurationServerRoute: typeof DotwellKnownOpenidConfigurationServerRoute
  ApiMcpServerRoute: typeof ApiMcpServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/my-events': {
      id: '/my-events'
      path: '/my-events'
      fullPath: '/my-events'
      preLoaderRoute: typeof MyEventsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/communities/': {
      id: '/communities/'
      path: '/communities'
      fullPath: '/communities'
      preLoaderRoute: typeof CommunitiesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/submit': {
      id: '/events/submit'
      path: '/events/submit'
      fullPath: '/events/submit'
      preLoaderRoute: typeof EventsSubmitRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/$eventSlug': {
      id: '/events/$eventSlug'
      path: '/events/$eventSlug'
      fullPath: '/events/$eventSlug'
      preLoaderRoute: typeof EventsEventSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/communities/create': {
      id: '/communities/create'
      path: '/communities/create'
      fullPath: '/communities/create'
      preLoaderRoute: typeof CommunitiesCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/communities/$communitySlug': {
      id: '/communities/$communitySlug'
      path: '/communities/$communitySlug'
      fullPath: '/communities/$communitySlug'
      preLoaderRoute: typeof CommunitiesCommunitySlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/pro/submit': {
      id: '/events/pro/submit'
      path: '/events/pro/submit'
      fullPath: '/events/pro/submit'
      preLoaderRoute: typeof EventsProSubmitRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/pro/$eventId': {
      id: '/events/pro/$eventId'
      path: '/events/pro/$eventId'
      fullPath: '/events/pro/$eventId'
      preLoaderRoute: typeof EventsProEventIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/mcp': {
      id: '/api/mcp'
      path: '/api/mcp'
      fullPath: '/api/mcp'
      preLoaderRoute: typeof ApiMcpServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/.well-known/openid-configuration': {
      id: '/.well-known/openid-configuration'
      path: '/.well-known/openid-configuration'
      fullPath: '/.well-known/openid-configuration'
      preLoaderRoute: typeof DotwellKnownOpenidConfigurationServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CalendarRoute: CalendarRoute,
  MyEventsRoute: MyEventsRoute,
  ProfileRoute: ProfileRoute,
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
  CommunitiesCommunitySlugRoute: CommunitiesCommunitySlugRoute,
  CommunitiesCreateRoute: CommunitiesCreateRoute,
  EventsEventSlugRoute: EventsEventSlugRoute,
  EventsSubmitRoute: EventsSubmitRoute,
  CommunitiesIndexRoute: CommunitiesIndexRoute,
  EventsProEventIdRoute: EventsProEventIdRoute,
  EventsProSubmitRoute: EventsProSubmitRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  DotwellKnownOpenidConfigurationServerRoute:
    DotwellKnownOpenidConfigurationServerRoute,
  ApiMcpServerRoute: ApiMcpServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
