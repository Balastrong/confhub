/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as CalendarRouteImport } from './routes/calendar'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CommunitiesIndexRouteImport } from './routes/communities/index'
import { Route as EventsSubmitProRouteImport } from './routes/events/submit-pro'
import { Route as EventsSubmitRouteImport } from './routes/events/submit'
import { Route as EventsEventIdRouteImport } from './routes/events/$eventId'
import { Route as CommunitiesCreateRouteImport } from './routes/communities/create'
import { Route as CommunitiesCommunitySlugRouteImport } from './routes/communities/$communitySlug'
import { ServerRoute as ApiMcpServerRouteImport } from './routes/api/mcp'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth.$'

const rootServerRouteImport = createServerRootRoute()

const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const CalendarRoute = CalendarRouteImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunitiesIndexRoute = CommunitiesIndexRouteImport.update({
  id: '/communities/',
  path: '/communities/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsSubmitProRoute = EventsSubmitProRouteImport.update({
  id: '/events/submit-pro',
  path: '/events/submit-pro',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsSubmitRoute = EventsSubmitRouteImport.update({
  id: '/events/submit',
  path: '/events/submit',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsEventIdRoute = EventsEventIdRouteImport.update({
  id: '/events/$eventId',
  path: '/events/$eventId',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunitiesCreateRoute = CommunitiesCreateRouteImport.update({
  id: '/communities/create',
  path: '/communities/create',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunitiesCommunitySlugRoute =
  CommunitiesCommunitySlugRouteImport.update({
    id: '/communities/$communitySlug',
    path: '/communities/$communitySlug',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApiMcpServerRoute = ApiMcpServerRouteImport.update({
  id: '/api/mcp',
  path: '/api/mcp',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/profile': typeof ProfileRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/communities/$communitySlug': typeof CommunitiesCommunitySlugRoute
  '/communities/create': typeof CommunitiesCreateRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/events/submit': typeof EventsSubmitRoute
  '/events/submit-pro': typeof EventsSubmitProRoute
  '/communities': typeof CommunitiesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/profile': typeof ProfileRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/communities/$communitySlug': typeof CommunitiesCommunitySlugRoute
  '/communities/create': typeof CommunitiesCreateRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/events/submit': typeof EventsSubmitRoute
  '/events/submit-pro': typeof EventsSubmitProRoute
  '/communities': typeof CommunitiesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/profile': typeof ProfileRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/communities/$communitySlug': typeof CommunitiesCommunitySlugRoute
  '/communities/create': typeof CommunitiesCreateRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/events/submit': typeof EventsSubmitRoute
  '/events/submit-pro': typeof EventsSubmitProRoute
  '/communities/': typeof CommunitiesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/calendar'
    | '/profile'
    | '/sign-in'
    | '/sign-up'
    | '/communities/$communitySlug'
    | '/communities/create'
    | '/events/$eventId'
    | '/events/submit'
    | '/events/submit-pro'
    | '/communities'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/calendar'
    | '/profile'
    | '/sign-in'
    | '/sign-up'
    | '/communities/$communitySlug'
    | '/communities/create'
    | '/events/$eventId'
    | '/events/submit'
    | '/events/submit-pro'
    | '/communities'
  id:
    | '__root__'
    | '/'
    | '/calendar'
    | '/profile'
    | '/sign-in'
    | '/sign-up'
    | '/communities/$communitySlug'
    | '/communities/create'
    | '/events/$eventId'
    | '/events/submit'
    | '/events/submit-pro'
    | '/communities/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CalendarRoute: typeof CalendarRoute
  ProfileRoute: typeof ProfileRoute
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
  CommunitiesCommunitySlugRoute: typeof CommunitiesCommunitySlugRoute
  CommunitiesCreateRoute: typeof CommunitiesCreateRoute
  EventsEventIdRoute: typeof EventsEventIdRoute
  EventsSubmitRoute: typeof EventsSubmitRoute
  EventsSubmitProRoute: typeof EventsSubmitProRoute
  CommunitiesIndexRoute: typeof CommunitiesIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/mcp': typeof ApiMcpServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/mcp': typeof ApiMcpServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/mcp': typeof ApiMcpServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/mcp' | '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/mcp' | '/api/auth/$'
  id: '__root__' | '/api/mcp' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiMcpServerRoute: typeof ApiMcpServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/communities/': {
      id: '/communities/'
      path: '/communities'
      fullPath: '/communities'
      preLoaderRoute: typeof CommunitiesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/submit-pro': {
      id: '/events/submit-pro'
      path: '/events/submit-pro'
      fullPath: '/events/submit-pro'
      preLoaderRoute: typeof EventsSubmitProRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/submit': {
      id: '/events/submit'
      path: '/events/submit'
      fullPath: '/events/submit'
      preLoaderRoute: typeof EventsSubmitRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/$eventId': {
      id: '/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/communities/create': {
      id: '/communities/create'
      path: '/communities/create'
      fullPath: '/communities/create'
      preLoaderRoute: typeof CommunitiesCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/communities/$communitySlug': {
      id: '/communities/$communitySlug'
      path: '/communities/$communitySlug'
      fullPath: '/communities/$communitySlug'
      preLoaderRoute: typeof CommunitiesCommunitySlugRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/mcp': {
      id: '/api/mcp'
      path: '/api/mcp'
      fullPath: '/api/mcp'
      preLoaderRoute: typeof ApiMcpServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CalendarRoute: CalendarRoute,
  ProfileRoute: ProfileRoute,
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
  CommunitiesCommunitySlugRoute: CommunitiesCommunitySlugRoute,
  CommunitiesCreateRoute: CommunitiesCreateRoute,
  EventsEventIdRoute: EventsEventIdRoute,
  EventsSubmitRoute: EventsSubmitRoute,
  EventsSubmitProRoute: EventsSubmitProRoute,
  CommunitiesIndexRoute: CommunitiesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiMcpServerRoute: ApiMcpServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
