/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignUpImport } from './routes/sign-up'
import { Route as SignInImport } from './routes/sign-in'
import { Route as ProfileImport } from './routes/profile'
import { Route as CalendarImport } from './routes/calendar'
import { Route as IndexImport } from './routes/index'
import { Route as CommunitiesIndexImport } from './routes/communities/index'
import { Route as EventsSubmitImport } from './routes/events/submit'
import { Route as EventsEventIdImport } from './routes/events/$eventId'
import { Route as DemoSearchImport } from './routes/demo/search'
import { Route as DemoLoadersRouteImport } from './routes/demo/loaders/route'
import { Route as DemoLoadersIndexImport } from './routes/demo/loaders/index'
import { Route as CommunitiesManagementIndexImport } from './routes/communities/management/index'
import { Route as DemoNestedExampleImport } from './routes/demo/nested/example'
import { Route as DemoLoadersDeferImport } from './routes/demo/loaders/defer'
import { Route as DemoLoadersBlockingImport } from './routes/demo/loaders/blocking'
import { Route as CommunitiesManagementCreateImport } from './routes/communities/management/create'
import { Route as CommunitiesManagementCommunityIdImport } from './routes/communities/management/$communityId'

// Create/Update Routes

const SignUpRoute = SignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const SignInRoute = SignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const CalendarRoute = CalendarImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CommunitiesIndexRoute = CommunitiesIndexImport.update({
  id: '/communities/',
  path: '/communities/',
  getParentRoute: () => rootRoute,
} as any)

const EventsSubmitRoute = EventsSubmitImport.update({
  id: '/events/submit',
  path: '/events/submit',
  getParentRoute: () => rootRoute,
} as any)

const EventsEventIdRoute = EventsEventIdImport.update({
  id: '/events/$eventId',
  path: '/events/$eventId',
  getParentRoute: () => rootRoute,
} as any)

const DemoSearchRoute = DemoSearchImport.update({
  id: '/demo/search',
  path: '/demo/search',
  getParentRoute: () => rootRoute,
} as any)

const DemoLoadersRouteRoute = DemoLoadersRouteImport.update({
  id: '/demo/loaders',
  path: '/demo/loaders',
  getParentRoute: () => rootRoute,
} as any)

const DemoLoadersIndexRoute = DemoLoadersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DemoLoadersRouteRoute,
} as any)

const CommunitiesManagementIndexRoute = CommunitiesManagementIndexImport.update(
  {
    id: '/communities/management/',
    path: '/communities/management/',
    getParentRoute: () => rootRoute,
  } as any,
)

const DemoNestedExampleRoute = DemoNestedExampleImport.update({
  id: '/demo/nested/example',
  path: '/demo/nested/example',
  getParentRoute: () => rootRoute,
} as any)

const DemoLoadersDeferRoute = DemoLoadersDeferImport.update({
  id: '/defer',
  path: '/defer',
  getParentRoute: () => DemoLoadersRouteRoute,
} as any)

const DemoLoadersBlockingRoute = DemoLoadersBlockingImport.update({
  id: '/blocking',
  path: '/blocking',
  getParentRoute: () => DemoLoadersRouteRoute,
} as any)

const CommunitiesManagementCreateRoute =
  CommunitiesManagementCreateImport.update({
    id: '/communities/management/create',
    path: '/communities/management/create',
    getParentRoute: () => rootRoute,
  } as any)

const CommunitiesManagementCommunityIdRoute =
  CommunitiesManagementCommunityIdImport.update({
    id: '/communities/management/$communityId',
    path: '/communities/management/$communityId',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInImport
      parentRoute: typeof rootRoute
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpImport
      parentRoute: typeof rootRoute
    }
    '/demo/loaders': {
      id: '/demo/loaders'
      path: '/demo/loaders'
      fullPath: '/demo/loaders'
      preLoaderRoute: typeof DemoLoadersRouteImport
      parentRoute: typeof rootRoute
    }
    '/demo/search': {
      id: '/demo/search'
      path: '/demo/search'
      fullPath: '/demo/search'
      preLoaderRoute: typeof DemoSearchImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId': {
      id: '/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdImport
      parentRoute: typeof rootRoute
    }
    '/events/submit': {
      id: '/events/submit'
      path: '/events/submit'
      fullPath: '/events/submit'
      preLoaderRoute: typeof EventsSubmitImport
      parentRoute: typeof rootRoute
    }
    '/communities/': {
      id: '/communities/'
      path: '/communities'
      fullPath: '/communities'
      preLoaderRoute: typeof CommunitiesIndexImport
      parentRoute: typeof rootRoute
    }
    '/communities/management/$communityId': {
      id: '/communities/management/$communityId'
      path: '/communities/management/$communityId'
      fullPath: '/communities/management/$communityId'
      preLoaderRoute: typeof CommunitiesManagementCommunityIdImport
      parentRoute: typeof rootRoute
    }
    '/communities/management/create': {
      id: '/communities/management/create'
      path: '/communities/management/create'
      fullPath: '/communities/management/create'
      preLoaderRoute: typeof CommunitiesManagementCreateImport
      parentRoute: typeof rootRoute
    }
    '/demo/loaders/blocking': {
      id: '/demo/loaders/blocking'
      path: '/blocking'
      fullPath: '/demo/loaders/blocking'
      preLoaderRoute: typeof DemoLoadersBlockingImport
      parentRoute: typeof DemoLoadersRouteImport
    }
    '/demo/loaders/defer': {
      id: '/demo/loaders/defer'
      path: '/defer'
      fullPath: '/demo/loaders/defer'
      preLoaderRoute: typeof DemoLoadersDeferImport
      parentRoute: typeof DemoLoadersRouteImport
    }
    '/demo/nested/example': {
      id: '/demo/nested/example'
      path: '/demo/nested/example'
      fullPath: '/demo/nested/example'
      preLoaderRoute: typeof DemoNestedExampleImport
      parentRoute: typeof rootRoute
    }
    '/communities/management/': {
      id: '/communities/management/'
      path: '/communities/management'
      fullPath: '/communities/management'
      preLoaderRoute: typeof CommunitiesManagementIndexImport
      parentRoute: typeof rootRoute
    }
    '/demo/loaders/': {
      id: '/demo/loaders/'
      path: '/'
      fullPath: '/demo/loaders/'
      preLoaderRoute: typeof DemoLoadersIndexImport
      parentRoute: typeof DemoLoadersRouteImport
    }
  }
}

// Create and export the route tree

interface DemoLoadersRouteRouteChildren {
  DemoLoadersBlockingRoute: typeof DemoLoadersBlockingRoute
  DemoLoadersDeferRoute: typeof DemoLoadersDeferRoute
  DemoLoadersIndexRoute: typeof DemoLoadersIndexRoute
}

const DemoLoadersRouteRouteChildren: DemoLoadersRouteRouteChildren = {
  DemoLoadersBlockingRoute: DemoLoadersBlockingRoute,
  DemoLoadersDeferRoute: DemoLoadersDeferRoute,
  DemoLoadersIndexRoute: DemoLoadersIndexRoute,
}

const DemoLoadersRouteRouteWithChildren =
  DemoLoadersRouteRoute._addFileChildren(DemoLoadersRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/profile': typeof ProfileRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/demo/loaders': typeof DemoLoadersRouteRouteWithChildren
  '/demo/search': typeof DemoSearchRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/events/submit': typeof EventsSubmitRoute
  '/communities': typeof CommunitiesIndexRoute
  '/communities/management/$communityId': typeof CommunitiesManagementCommunityIdRoute
  '/communities/management/create': typeof CommunitiesManagementCreateRoute
  '/demo/loaders/blocking': typeof DemoLoadersBlockingRoute
  '/demo/loaders/defer': typeof DemoLoadersDeferRoute
  '/demo/nested/example': typeof DemoNestedExampleRoute
  '/communities/management': typeof CommunitiesManagementIndexRoute
  '/demo/loaders/': typeof DemoLoadersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/profile': typeof ProfileRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/demo/search': typeof DemoSearchRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/events/submit': typeof EventsSubmitRoute
  '/communities': typeof CommunitiesIndexRoute
  '/communities/management/$communityId': typeof CommunitiesManagementCommunityIdRoute
  '/communities/management/create': typeof CommunitiesManagementCreateRoute
  '/demo/loaders/blocking': typeof DemoLoadersBlockingRoute
  '/demo/loaders/defer': typeof DemoLoadersDeferRoute
  '/demo/nested/example': typeof DemoNestedExampleRoute
  '/communities/management': typeof CommunitiesManagementIndexRoute
  '/demo/loaders': typeof DemoLoadersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/profile': typeof ProfileRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/demo/loaders': typeof DemoLoadersRouteRouteWithChildren
  '/demo/search': typeof DemoSearchRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/events/submit': typeof EventsSubmitRoute
  '/communities/': typeof CommunitiesIndexRoute
  '/communities/management/$communityId': typeof CommunitiesManagementCommunityIdRoute
  '/communities/management/create': typeof CommunitiesManagementCreateRoute
  '/demo/loaders/blocking': typeof DemoLoadersBlockingRoute
  '/demo/loaders/defer': typeof DemoLoadersDeferRoute
  '/demo/nested/example': typeof DemoNestedExampleRoute
  '/communities/management/': typeof CommunitiesManagementIndexRoute
  '/demo/loaders/': typeof DemoLoadersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/calendar'
    | '/profile'
    | '/sign-in'
    | '/sign-up'
    | '/demo/loaders'
    | '/demo/search'
    | '/events/$eventId'
    | '/events/submit'
    | '/communities'
    | '/communities/management/$communityId'
    | '/communities/management/create'
    | '/demo/loaders/blocking'
    | '/demo/loaders/defer'
    | '/demo/nested/example'
    | '/communities/management'
    | '/demo/loaders/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/calendar'
    | '/profile'
    | '/sign-in'
    | '/sign-up'
    | '/demo/search'
    | '/events/$eventId'
    | '/events/submit'
    | '/communities'
    | '/communities/management/$communityId'
    | '/communities/management/create'
    | '/demo/loaders/blocking'
    | '/demo/loaders/defer'
    | '/demo/nested/example'
    | '/communities/management'
    | '/demo/loaders'
  id:
    | '__root__'
    | '/'
    | '/calendar'
    | '/profile'
    | '/sign-in'
    | '/sign-up'
    | '/demo/loaders'
    | '/demo/search'
    | '/events/$eventId'
    | '/events/submit'
    | '/communities/'
    | '/communities/management/$communityId'
    | '/communities/management/create'
    | '/demo/loaders/blocking'
    | '/demo/loaders/defer'
    | '/demo/nested/example'
    | '/communities/management/'
    | '/demo/loaders/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CalendarRoute: typeof CalendarRoute
  ProfileRoute: typeof ProfileRoute
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
  DemoLoadersRouteRoute: typeof DemoLoadersRouteRouteWithChildren
  DemoSearchRoute: typeof DemoSearchRoute
  EventsEventIdRoute: typeof EventsEventIdRoute
  EventsSubmitRoute: typeof EventsSubmitRoute
  CommunitiesIndexRoute: typeof CommunitiesIndexRoute
  CommunitiesManagementCommunityIdRoute: typeof CommunitiesManagementCommunityIdRoute
  CommunitiesManagementCreateRoute: typeof CommunitiesManagementCreateRoute
  DemoNestedExampleRoute: typeof DemoNestedExampleRoute
  CommunitiesManagementIndexRoute: typeof CommunitiesManagementIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CalendarRoute: CalendarRoute,
  ProfileRoute: ProfileRoute,
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
  DemoLoadersRouteRoute: DemoLoadersRouteRouteWithChildren,
  DemoSearchRoute: DemoSearchRoute,
  EventsEventIdRoute: EventsEventIdRoute,
  EventsSubmitRoute: EventsSubmitRoute,
  CommunitiesIndexRoute: CommunitiesIndexRoute,
  CommunitiesManagementCommunityIdRoute: CommunitiesManagementCommunityIdRoute,
  CommunitiesManagementCreateRoute: CommunitiesManagementCreateRoute,
  DemoNestedExampleRoute: DemoNestedExampleRoute,
  CommunitiesManagementIndexRoute: CommunitiesManagementIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/calendar",
        "/profile",
        "/sign-in",
        "/sign-up",
        "/demo/loaders",
        "/demo/search",
        "/events/$eventId",
        "/events/submit",
        "/communities/",
        "/communities/management/$communityId",
        "/communities/management/create",
        "/demo/nested/example",
        "/communities/management/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/calendar": {
      "filePath": "calendar.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/sign-in": {
      "filePath": "sign-in.tsx"
    },
    "/sign-up": {
      "filePath": "sign-up.tsx"
    },
    "/demo/loaders": {
      "filePath": "demo/loaders/route.tsx",
      "children": [
        "/demo/loaders/blocking",
        "/demo/loaders/defer",
        "/demo/loaders/"
      ]
    },
    "/demo/search": {
      "filePath": "demo/search.tsx"
    },
    "/events/$eventId": {
      "filePath": "events/$eventId.tsx"
    },
    "/events/submit": {
      "filePath": "events/submit.tsx"
    },
    "/communities/": {
      "filePath": "communities/index.tsx"
    },
    "/communities/management/$communityId": {
      "filePath": "communities/management/$communityId.tsx"
    },
    "/communities/management/create": {
      "filePath": "communities/management/create.tsx"
    },
    "/demo/loaders/blocking": {
      "filePath": "demo/loaders/blocking.tsx",
      "parent": "/demo/loaders"
    },
    "/demo/loaders/defer": {
      "filePath": "demo/loaders/defer.tsx",
      "parent": "/demo/loaders"
    },
    "/demo/nested/example": {
      "filePath": "demo/nested/example.tsx"
    },
    "/communities/management/": {
      "filePath": "communities/management/index.tsx"
    },
    "/demo/loaders/": {
      "filePath": "demo/loaders/index.tsx",
      "parent": "/demo/loaders"
    }
  }
}
ROUTE_MANIFEST_END */
